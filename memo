关于如何创建ucore.img
--UCOREIMG := $(call totarget,ucore.img) #这是一个赋值语句（后面不会再多做强调），UCOREIMG被赋值为bin/                                          ucore.img
--ucore.img依赖kernel还有bootblock
--第一行if, 输入为/dev/zero，输出为ucore.img，拷贝10000个block
--第二行if，输入为bootblock，输出为ucore.img，以不截短输出文件的方式转换文件
--第三行if，输入为kernel，输出为ucore.img，从ucore.img跳过一个block开始复制，方式跟上述一样

--最后依据上述的方法，(call create_target,ucore.img)将ucore.img创建


使用qemu进行调试(make debug)
--通过输入make debug开启qemu以及gdb进行调试
--我们可以发现，默认的断点是设在了0x100000位置，也就是ini.c文件的kern_init()函数位置,我们需要为其设之一个新的断点，进入gdb，输入b*0x7x00来添加breakpoint2,通过info break来观察现在的断点个数，continue命令进入下一个断点。
--从0x7c00开始反汇编跟踪代码，将得到的代码与bootasm.s以及bootblock.asm进行比较，我们可以发现，代码的含义是一样的，只不过表现的方式不一样而已


分析bootloader进入保护模式的过程
--在此之前，我在重新描述一下过程
	：先从主引导扇区到内存0x7c00，之后开始开始bootloader，也就是bootasm等等
	：开始执行bootasm中的start,里面内容包括停止中断，各类寄存器的初始化（目前还是在实模式）
	：开始修改A20地址线，完成了实模式到保护模式的转换
	：更改保护模式的各类寄存器
	：进入bootmain.(bootmain.c)

--一开始是实模式，指针指向的都是物理地址，很危险，需要转换到保护模式
--在实模式下，20根地址线访问数据有限，同时再段地址加偏移地址的转换的话，会导致访问1M以上的数据不正确。后期出现了24跟地址线的80286，解决了这个问题
--但是为了满足向下兼容性，需要用A20来模拟8086的回绕特征。
--因此，在实模式到保护模式转换的时候需要开启A20，具体的开启方式要结合键盘控制器8042的输出端口P2的第二位来进行改变
--往8042的输入缓冲中写数据，先要禁止键盘操作，以及等待数据缓冲区没有数据，再修改
--更改结束后，执行一段gdt代码？让虚拟地址等价与物理地址后，进入保护模式


分析bootloader中加载elf格式的OS的过程
--在bootloader中的bootmain()函数中，


练习五，练习六见代码实现部分，这里不多说了

进入保护模式后的好处
	：访问的地址扩大
	：可以采用分段以及分页技术
	：为虚拟存储提供了帮助
	：代码段与数据段得到了分离
